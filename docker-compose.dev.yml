services:
  pg:
    container_name: wtb_pg
    image: postgres:15
    env_file:
      - ./packages/server/.env
    restart: on-failure:3
    user: "999:999"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./docker_data/postgres/config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker_data/postgres/config/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    ports:
      - "0.0.0.0:5432:5432"
    command: bash -c "
      docker-entrypoint.sh postgres -c config_file=/etc/postgresql/postgresql.conf -c hba_file=/etc/postgresql/pg_hba.conf
      "
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - FOWNER
      - SETGID
      - SETUID
    healthcheck:
      test:
        ["CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  server:
    container_name: wtb_server
    image: traktirwik/way_to_bot:server_${TAG:?err}_${ENV:?err}
    ports:
      - "3000:3000"
    depends_on:
      pg:
        condition: service_healthy
    env_file:
      - ./packages/server/.env
    restart: on-failure:3
    volumes:
      - ./packages/server/.env:/app/packages/server/.env
      - ./docker_data/uploads:/app/docker_data/uploads
      - ./docker_data/api_logs:/app/docker_data/api_logs
    command: >
      sh -c "
        cd packages/server &&
        sh bin/typeorm/run-migration.sh && 
        pnpm run production
      "

  web:
    container_name: wtb_web
    image: traktirwik/way_to_bot:web_${TAG:?err}_${ENV:?err}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-dev.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/service_unavailable:/usr/share/nginx/html/service_unavailable:ro
      - ./docker_data/uploads:/usr/share/nginx/html/uploads
      - ./docker_data/certbot/www/:/var/www/certbot/:ro
      - ./docker_data/certbot/conf/:/etc/nginx/ssl/:ro
      - ./docker_data/nginx/logs:/var/log/nginx
    restart: on-failure:3

    nginx-log-cleaner:
      container_name: wtb_nginx_log_cleaner
      image: alpine:3
      restart: unless-stopped
      environment:
        - LOG_RETENTION_DAYS=3
        - LOG_CLEAN_INTERVAL_SEC=21600
      volumes:
        - ./docker_data/nginx/logs:/var/log/nginx
      command: >
        sh -c "while true; do \
          if [ -d /var/log/nginx ]; then \
            find /var/log/nginx -type f -mtime +${LOG_RETENTION_DAYS:-7} -print -delete; \
          fi; \
          sleep ${LOG_CLEAN_INTERVAL_SEC:-21600}; \
        done"

  certbot:
    container_name: wtb_certbot
    image: certbot/certbot:latest
    volumes:
      - ./docker_data/certbot/www/:/var/www/certbot/:rw
      - ./docker_data/certbot/conf/:/etc/letsencrypt/:rw
    entrypoint: |
      sh -c "
        certbot certonly --webroot -w /var/www/certbot -d waytochess.space --email ignatmustafin77@gmail.com --agree-tos --non-interactive --keep-until-expiring &&
        sleep 1d &&
        exit 0
      "
    restart: on-failure:3

volumes:
  pg_data:
