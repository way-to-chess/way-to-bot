import { EventEntity } from "@way-to-bot/server/database/entities/event.entity.mjs";
import { ParticipateRequestEntity } from "@way-to-bot/server/database/entities/participate-request.entity.mjs";
import { WEB_URL } from "@way-to-bot/server/utils/constants.mjs";
import { EParticipateRequestStatus } from "@way-to-bot/shared/api/enums/index.js";
import moment from "moment";
import "moment/locale/ru.js";
import TelegramBot from "node-telegram-bot-api";

type TBotMessage = {
  message: string;
  options?: TelegramBot.SendMessageOptions;
};

const optionsBase = (): TelegramBot.SendMessageOptions => {
  return {
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ?",
            web_app: {
              url: `${WEB_URL}/tutorial`,
            },
          },
          {
            text: "–ö–æ–Ω—Ç–∞–∫—Ç—ã",
            callback_data: "show_contacts",
          },
        ],
        [
          {
            text: "–û—Ç–∫—Ä—ã—Ç—å —Å–æ–±—ã—Ç–∏—è",
            web_app: {
              url: `${WEB_URL}/events`,
            },
          },
          {
            text: "–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤",
            web_app: {
              url: `${WEB_URL}/leaderboard`,
            },
          },
        ],
        [
          {
            text: "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (–∞–Ω–æ–Ω–∏–º–Ω–æ)",
            callback_data: "leave_feedback",
          },
        ],
      ],
    },
  };
};

const optionsGoToEvent = (eventId: number): TelegramBot.SendMessageOptions => {
  return {
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–±—ã—Ç–∏—é",
            web_app: { url: `${WEB_URL}/events/${eventId}` },
          },
        ],
      ],
    },
  };
};

export const botMessageStart = () => {
  const message = `‚ôüÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WAY TO CHESS BOT!</b>

–£ –Ω–∞—Å —Ç—ã –Ω–∞–π–¥—ë—à—å <b>—Ç—É—Ä–Ω–∏—Ä—ã –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π</b> ‚Äî –∫–∞–∫ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤, —Ç–∞–∫ –∏ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –ª—é–±–∏—Ç–µ–ª–µ–π. –£—á–∞—Å—Ç–≤—É–π –≤ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ!

<b>–í–æ—Ç —á—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:</b>

‚úÖ <b>–ó–∞–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã</b> ‚Äî –≤—ã–±–∏—Ä–∞–π —Ñ–æ—Ä–º–∞—Ç –∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏  

üìà <b>–°–ª–µ–¥–∏ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π</b> ‚Äî –≤—Å—ë —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ç–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ  

üèÜ <b>–°–º–æ—Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤</b> ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π—Å—è –∏ —Å—Ç—Ä–µ–º–∏—Å—å –∫ –≤–µ—Ä—à–∏–Ω–µ  

<b>–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?</b> –ù–∞–∂–º–∏ <b>¬´WAT TO CHESS¬ª</b> –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.  
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º –∏ –ø–æ–º–æ–∂–µ–º!

‚ôú <b>–í–ø–µ—Ä—ë–¥ –∫ –Ω–æ–≤—ã–º —à–∞—Ö–º–∞—Ç–Ω—ã–º –≤–µ—Ä—à–∏–Ω–∞–º!</b>`;

  return {
    message,
    options: optionsBase(),
  };
};

export const botMessageNewEvent = (event: EventEntity): TBotMessage => {
  moment.locale("ru");
  const date = moment(event.dateTime).add(3, "hours");
  const message = `üì¢ <b>–ù–æ–≤–æ–µ —à–∞—Ö–º–∞—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ!</b>

–û—Ç–∫—Ä—ã—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä: <b>${event.name}</b>

üìÖ <b>–î–∞—Ç–∞:</b> <i>${date.format("DD MMMM YYYY, HH:mm")} (–ú–°–ö)</i>

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è:</b> ${event.price}

üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏:\n</b> <i>${event.description}</i>

üìç <b>–ê–¥—Ä–µ—Å:</b> <a href="${event.location?.url}">${event.location?.title}: ${event.location?.address}</a>

üéØ <b>–£—Å–ø–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚Äî –º–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã!</b>

–ù–∞–∂–º–∏ <b>"–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–±—ã—Ç–∏—é"</b> –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.`;

  return {
    message,
    options: optionsGoToEvent(event.id),
  };
};

export const botMessageNotify = (event: EventEntity): TBotMessage => {
  const date = moment(event.dateTime).add(3, "hours");
  const message = `‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Ç—É—Ä–Ω–∏—Ä–µ!</b>

–¢—ã –∑–∞–ø–∏—Å–∞–Ω(–∞) –Ω–∞ —Ç—É—Ä–Ω–∏—Ä <b>¬´${event.name}¬ª</b> ‚Äî –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏!

üìÖ <b>–î–∞—Ç–∞:</b> <i>${date.format("DD MMMM YYYY, HH:mm")} (–ú–°–ö)</i>

üìç <b>–ê–¥—Ä–µ—Å:</b> <a href="${event.location?.url}">${event.location?.title}: ${event.location?.address}</a>

üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏:\n</b> <i>${event.description}</i>

üéØ –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã —Å–ø–æ–∫–æ–π–Ω–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É!`;

  return {
    message,
    options: optionsGoToEvent(event.id),
  };
};

export const botMessageParticipateRequestStatusChanged = (
  pr: ParticipateRequestEntity,
) => {
  const date = moment(pr.event.dateTime).add(3, "hours");
  const message =
    pr.status === EParticipateRequestStatus.APPROVED
      ? `‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞</b>

<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b> üéâ

üóì <b>${pr.event.name}</b>

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:</b>

¬´${pr.message}¬ª

üìç <b>–ê–¥—Ä–µ—Å:</b> <a href="${pr.event.location?.url}">${pr.event.location?.title}: ${pr.event.location?.address}</a>

üïí <b>–ù–∞—á–∞–ª–æ:</b> <i>${date.format("DD MMMM YYYY, HH:mm")} (–ú–°–ö)</i>

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–∏–π—Ç–∏ <b>–Ω–µ–º–Ω–æ–≥–æ –∑–∞—Ä–∞–Ω–µ–µ</b>, —á—Ç–æ–±—ã —Å–ø–æ–∫–æ–π–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è. –£–¥–∞—á–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ! ‚ôüÔ∏è `
      : pr.status === EParticipateRequestStatus.REJECTED
        ? `‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>

<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>

üóì <b>${pr.event.name}</b>

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:</b>

¬´${pr.message}¬ª`
        : null;

  if (!message) {
    throw new Error(`No message for status ${pr.status}`);
  }

  return {
    message,
    options: optionsGoToEvent(pr.event.id),
  };
};

export const botMessageDefault = (): TBotMessage => {
  const message = `<b>ü§ñ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "WAY TO CHESS", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ:</b>

üìò <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?</b> ‚Äî –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º

üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b> ‚Äî –∫–∞–∫ —Å –Ω–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è

üìÖ <b>–°–æ–±—ã—Ç–∏—è</b> ‚Äî –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

üèÜ <b>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤</b> ‚Äî —Å–º–æ—Ç—Ä–∏, –∫—Ç–æ –≤ —Ç–æ–ø–µ

üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –≤—Å–µ–≥–¥–∞ –ø–∏—à–∏ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ–º! üí¨`;
  return {
    message,
    options: optionsBase(),
  };
};

export const botMessageCustom = (
  message: string,
  options?: TelegramBot.SendMessageOptions,
) => {
  options = options ? options : optionsBase();

  return {
    message,
    options,
  };
};
